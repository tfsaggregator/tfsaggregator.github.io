<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Usings on TFS Aggregator Docs</title>
    <link>https://tfsaggregator.github.io/using/index.xml</link>
    <description>Recent content in Usings on TFS Aggregator Docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://tfsaggregator.github.io/using/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Users&#39; Guide</title>
      <link>https://tfsaggregator.github.io/using/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tfsaggregator.github.io/using/</guid>
      <description>

&lt;h2 id=&#34;users-guide-to-tfs-aggregator&#34;&gt;Users&amp;rsquo; Guide to TFS Aggregator&lt;/h2&gt;

&lt;p&gt;This Guide explains how to write the Rules.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Writing Rules and Policies</title>
      <link>https://tfsaggregator.github.io/using/writing-rules/writing-rules/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tfsaggregator.github.io/using/writing-rules/writing-rules/</guid>
      <description>

&lt;p&gt;The &lt;code&gt;samples\TFSAggregator2.ServerPlugin.policies&lt;/code&gt; should be your &lt;strong&gt;starting point&lt;/strong&gt;. This file contains a no-harm policy: it simply logs an &amp;ldquo;&lt;em&gt;Hello, World&lt;/em&gt;&amp;rdquo; message when invoked. The comments remind the syntax.&lt;/p&gt;

&lt;h2 id=&#34;editing-a-policy&#34;&gt;Editing a policy&lt;/h2&gt;

&lt;p&gt;The XML Schema definition is in file &lt;code&gt;Aggregator.Core\Configuration\AggregatorConfiguration.xsd&lt;/code&gt;. This is the ultimate truth: policy file is checked against XSD before being used.&lt;/p&gt;

&lt;p&gt;It can also help you editing the policy file in Visual Studio.
Open TfsAggregator2 solution in Visual Studio, open a policy file using built-in Xml editor, Select &lt;strong&gt;XML&lt;/strong&gt; from the main menu, then &lt;strong&gt;Schemas&lt;/strong&gt;. In the dialog windows select &lt;strong&gt;Use this Schema&lt;/strong&gt; for &lt;code&gt;AggregatorConfiguration.xsd&lt;/code&gt; from the drop-down list.
&lt;img src=&#34;./VisualStudio-Xml-Schema.png&#34; alt=&#34;Select AggregatorConfiguration.xsd&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Configuration XML syntax</title>
      <link>https://tfsaggregator.github.io/using/policy-syntax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tfsaggregator.github.io/using/policy-syntax/</guid>
      <description>

&lt;h2 id=&#34;reference-to-xml-syntax-of-policies-file&#34;&gt;Reference to XML syntax of Policies file.&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the basic beginning to an XML file. Do not change it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;AggregatorConfiguration&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;AggregatorConfiguration&lt;/strong&gt;: The main node for all the configuration options. (Single)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;runtime debug=&amp;quot;False&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;runtime&lt;/strong&gt;: Configure generic behavior. (Once, Optional)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;debug&lt;/strong&gt;: turns on debugging options (Optional, default: False)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;        &amp;lt;rateLimiting interval=&amp;quot;00:00:10.00&amp;quot; changes=&amp;quot;10&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;rateLimiting&lt;/strong&gt;: Define how Aggregator rejects incoming requests. (Once, Optional)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;interval&lt;/strong&gt;: Timespan to validate. (Optional, default: 00:00:01.00)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;changes&lt;/strong&gt;: Maximum number of changes in interval. (Optional, default: 5 )&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Use RateLimiting.policy to test your configuration on a server.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        &amp;lt;logging level=&amp;quot;Diagnostic&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;logging&lt;/strong&gt;: Define logging behavior. (Once, Optional)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;level&lt;/strong&gt;: The level of logging. (Optional)
Valid values are:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Critical&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Warning&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Information&lt;/code&gt; or &lt;code&gt;Normal&lt;/code&gt; &amp;ndash; default value&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Verbose&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Diagnostic&lt;/code&gt;.
See the Help page for more information: &lt;a href=&#34;https://tfsaggregator.github.io/admin/troubleshooting&#34;&gt;TFS Aggregator Troubleshooting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;        &amp;lt;script language=&amp;quot;C#&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;script&lt;/strong&gt;: Define script engine behavior. (Once, Optional)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;language&lt;/strong&gt;: The language used to express the rules. (Optional)
Valid values are:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CS&lt;/code&gt;,&lt;code&gt;CSHARP&lt;/code&gt;,&lt;code&gt;C#&lt;/code&gt; &amp;ndash; default value&lt;/li&gt;
&lt;li&gt;&lt;code&gt;VB&lt;/code&gt;,&lt;code&gt;VB.NET&lt;/code&gt;,&lt;code&gt;VBNET&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PS&lt;/code&gt;,&lt;code&gt;POWERSHELL&lt;/code&gt; &amp;ndash; &lt;em&gt;Experimental&lt;/em&gt;!&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;        &amp;lt;authentication autoImpersonate=&amp;quot;true&amp;quot; /&amp;gt;
        &amp;lt;authentication personalToken=&amp;quot;abcd1234654sdfsfsdfs45645654645&amp;quot; /&amp;gt;
        &amp;lt;authentication username=&amp;quot;user1&amp;quot; password=&amp;quot;password1&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;authentication&lt;/strong&gt;: Define authentication behavior. (Once, Optional)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;autoImpersonate&lt;/strong&gt;: &lt;code&gt;false&lt;/code&gt; (default) the TFS Service account, &lt;code&gt;true&lt;/code&gt; the user requesting. (Optional)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;personalToken&lt;/strong&gt;: A Personal Access Token. (WebService, Optional)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;username&lt;/strong&gt;: A Username. (WebService, Optional)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;password&lt;/strong&gt;: A Password in clear text. (WebService, Optional)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;        &amp;lt;server baseUrl=&amp;quot;http://localhost:8080/tfs&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;server&lt;/strong&gt;: Define server configuration. (2.1, Once, Optional)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;baseUrl&lt;/strong&gt;: Forces the URL that Aggregator use to access TFS. (Optional)
Can be useful is TFS is misconfigured, or you have some special requirements.
Avoid to use if possibile.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;snippet name=&amp;quot;MySnippet&amp;quot;&amp;gt;
    &amp;lt;/snippet&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;snippet&lt;/strong&gt;: Represents a code macro rule. (2.2, Repeatable)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;name&lt;/strong&gt;: The name of this code macro. (Mandatory)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;function&amp;gt;
    &amp;lt;/function&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;function&lt;/strong&gt;: Contains methods callable from rules. (2.2, Repeatable)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;rule name=&amp;quot;Noop&amp;quot; appliesTo=&amp;quot;Task,Bug&amp;quot; hasFields=&amp;quot;System.Title,System.Description&amp;quot;&amp;gt;
    &amp;lt;/rule&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;rule&lt;/strong&gt;: Represents a single rule. (Repeatable)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;name&lt;/strong&gt;: The name of this rule. (Mandatory)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;appliesTo&lt;/strong&gt;: The name of the work item type that this rule will target. (All: *, List, Optional, List separators: ,;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;hasFields&lt;/strong&gt;: The work item must have the listed fields for the rule to apply. (All: *, List, Optional, List separators: ,;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;changes&lt;/strong&gt;: &lt;code&gt;New,Change,Delete,Restore&lt;/code&gt; (default) what change event triggers the Rule. (WebService, Optional)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;content&lt;/em&gt;&lt;/strong&gt;: the script to execute when the rule triggers. (Mandatory)
The &lt;code&gt;self&lt;/code&gt; (&lt;code&gt;$self&lt;/code&gt; in PowerShell) variable contains the work item that triggered the plugin.
The &lt;code&gt;self&lt;/code&gt; (&lt;code&gt;$self&lt;/code&gt; in PowerShell) variable contains the work item that triggered the plugin.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We recommended using &lt;a href=&#34;http://www.w3.org/TR/REC-xml/#sec-cdata-sect&#34;&gt;CDATA&lt;/a&gt; to wrap script code.
See &lt;a href=&#34;Scripting&#34;&gt;Scripting&lt;/a&gt; for additional details on Rules&amp;rsquo; code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;policy name=&amp;quot;DefaultPolicy&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;policy&lt;/strong&gt;: Represent a set of aggregation rules that apply to a particular scope. (Repeatable)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;name&lt;/strong&gt;: The name of this policy. (Mandatory)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All scopes must match for the policy to apply (logical &lt;em&gt;and&lt;/em&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        &amp;lt;collectionScope collections=&amp;quot;DefaultCollection&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;collectionScope&lt;/strong&gt;: Scope the policy to a list of collections. (Optional)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;collections&lt;/strong&gt;: The TFS Collection to which the policy applies. (All: *, List, Mandatory, List separators: ,;)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;        &amp;lt;templateScope name=&amp;quot;Scrum&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;templateScope&lt;/strong&gt;: Scope the policy to Team Projects using a particular Process Template. (Optional, Repeatable)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;name&lt;/strong&gt;: Name of Process Template matching. (Mandatory, mutually exclusive with typeid)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;templateScope&lt;/strong&gt; requires that &lt;strong&gt;name&lt;/strong&gt; must be present.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        &amp;lt;projectScope projects=&amp;quot;Project1,Project2&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;projectScope&lt;/strong&gt;: Scope the policy to listed Team Projects. (Optional)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;projects&lt;/strong&gt;: List of Team Project names. (All: *, List, Mandatory, List separators: ,;)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;        &amp;lt;ruleRef name=&amp;quot;Noop&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ruleRef&lt;/strong&gt;: Reference to a previously declared rule. (Repeatable)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;name&lt;/strong&gt;: Name of existing Rule. (Required)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Rules apply in order.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Scripting the Rules</title>
      <link>https://tfsaggregator.github.io/using/scripting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tfsaggregator.github.io/using/scripting/</guid>
      <description>

&lt;h2 id=&#34;script-languages&#34;&gt;Script languages&lt;/h2&gt;

&lt;p&gt;You can use C# and VB.Net to write your rules. Powershell also works but we had little tested it.&lt;/p&gt;

&lt;h3 id=&#34;c-and-vb&#34;&gt;C# and VB&lt;/h3&gt;

&lt;p&gt;You can use only types from these assemblies:
 * &lt;code&gt;System&lt;/code&gt;
 * &lt;code&gt;System.Core&lt;/code&gt;
 * &lt;code&gt;Microsoft.TeamFoundation.WorkItemTracking.Client&lt;/code&gt;
 * &lt;code&gt;Aggregator.Core&lt;/code&gt;
Any other reference will result in compile errors.&lt;/p&gt;

&lt;p&gt;The following namespaces are imported (C# &lt;code&gt;using&lt;/code&gt;, VB &lt;code&gt;Imports&lt;/code&gt;):
 * &lt;code&gt;Microsoft.TeamFoundation.WorkItemTracking.Client&lt;/code&gt;
 * &lt;code&gt;System.Linq&lt;/code&gt;
 * &lt;code&gt;Microsoft.TeamFoundation.WorkItemTracking.Client.CoreFieldReferenceNames&lt;/code&gt;
 * &lt;code&gt;Aggregator.Core&lt;/code&gt; and descendants&lt;/p&gt;

&lt;h2 id=&#34;code&#34;&gt;Code&lt;/h2&gt;

&lt;p&gt;You can make your code more modular, using macro snippets or functions.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;snippet name=&amp;quot;MySnippet&amp;quot;&amp;gt;&amp;lt;![CDATA[
    logger.Log(&amp;quot;You entered MySnippet snippet.&amp;quot;);
]]&amp;gt;&amp;lt;/snippet&amp;gt;

&amp;lt;function&amp;gt;&amp;lt;![CDATA[
  int MyFunc() { return 42; }
]]&amp;gt;&amp;lt;/function&amp;gt;

&amp;lt;rule name=&amp;quot;MyFirstRule&amp;quot; appliesTo=&amp;quot;Task&amp;quot; hasFields=&amp;quot;Title&amp;quot;&amp;gt;&amp;lt;![CDATA[
    ${MySnippet}
    logger.Log(&amp;quot;Hello, World from {1} #{0}!&amp;quot;, self.Id, self.TypeName);
    logger.Log(&amp;quot;MyFunc returns {0}.&amp;quot;, MyFunc());
]]&amp;gt;&amp;lt;/rule&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This way you can reuse the same code in multiple rules.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Objects Reference</title>
      <link>https://tfsaggregator.github.io/using/object-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tfsaggregator.github.io/using/object-model/</guid>
      <description>&lt;p&gt;Aggregator exposes some predefined objects or variables to your rules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tfsaggregator.github.io/using/objects-reference/self-object&#34;&gt;&lt;code&gt;self&lt;/code&gt;&lt;/a&gt; as the pivot for all computation.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tfsaggregator.github.io/using/objects-reference/store-object&#34;&gt;&lt;code&gt;store&lt;/code&gt;&lt;/a&gt; to access the entire set of work items.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tfsaggregator.github.io/using/objects-reference/logger-object&#34;&gt;&lt;code&gt;logger&lt;/code&gt;&lt;/a&gt; to add a trace message to the log output.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tfsaggregator.github.io/using/objects-reference/library-objects&#34;&gt;&lt;code&gt;Library&lt;/code&gt;&lt;/a&gt; access to a library of pre-canned functions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will refer the TeamCollection containing the &lt;code&gt;self&lt;/code&gt; work item as the &lt;em&gt;current&lt;/em&gt; Collection.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>self Object</title>
      <link>https://tfsaggregator.github.io/using/objects-reference/self-object/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tfsaggregator.github.io/using/objects-reference/self-object/</guid>
      <description>

&lt;p&gt;Represents the work item that triggered the rule and corresponds to the &lt;code&gt;IWorkItemExposed&lt;/code&gt; interface.&lt;/p&gt;

&lt;h2 id=&#34;fields-collection&#34;&gt;Fields collection&lt;/h2&gt;

&lt;p&gt;You can directly access a Field using its name:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;self.Fields[&amp;quot;field_name&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Prefer using Reference names e.g. &lt;code&gt;System.Title&lt;/code&gt; as they do not depend on localization and are more resilient to Process template changes.&lt;/p&gt;

&lt;p&gt;To simply access a field value, you can use &lt;code&gt;self[&amp;quot;field_name&amp;quot;]&lt;/code&gt; as a shorthand for &lt;code&gt;self.Fields[&amp;quot;field_name&amp;quot;].Value&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For numeric and dates you may prefer using&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var num = self.GetField&amp;lt;int&amp;gt;(&amp;quot;field_name&amp;quot;, 42);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;for other type of fields we suggest to use the following syntax&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var str = self[&amp;quot;field_name&amp;quot;]?.ToString();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See &lt;a href=&#34;https://tfsaggregator.github.io/using/objects-reference/field-object&#34;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt; for more information.&lt;/p&gt;

&lt;h2 id=&#34;parent-property&#34;&gt;Parent property&lt;/h2&gt;

&lt;p&gt;Helper property to navigate a work item&amp;rsquo;s parent in the Parent-Child hierarchy. Applies to any work item object.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;self.Parent[&amp;quot;System.Title&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;children-property&#34;&gt;Children property&lt;/h2&gt;

&lt;p&gt;Helper property to navigate a work item&amp;rsquo;s children in the Parent-Child hierarchy.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;foreach (var child in self.Children)
{
   if (child.TypeName == &amp;quot;Bug&amp;quot;)
   {
      //...
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;hasparent-haschildren-hasrelation-methods&#34;&gt;HasParent / HasChildren / HasRelation methods&lt;/h2&gt;

&lt;p&gt;Helper methods to avoid referencing null properties. Applies to any work item object.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (self.HasParent()) {
   self.Parent[&amp;quot;System.Title&amp;quot;] = &amp;quot;*** &amp;quot; + self.Parent[&amp;quot;System.Title&amp;quot;];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Always prefer the Immutable name of the Link Type, e.g. &lt;code&gt;System.LinkTypes.Hierarchy-Reverse&lt;/code&gt; instead of &lt;code&gt;Parent&lt;/code&gt; in
&lt;code&gt;HasRelation&lt;/code&gt;.
You can use the pre-defined &lt;code&gt;WorkItemImplementationBase.ChildRelationship&lt;/code&gt; and &lt;code&gt;WorkItemImplementationBase.ParentRelationship&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;addworkitemlink-methods&#34;&gt;AddWorkItemLink methods&lt;/h2&gt;

&lt;p&gt;Add a link to another work item.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var parent = self;
if (!self.HasChildren())
{
    var child = store.MakeNewWorkItem((string)parent[&amp;quot;System.TeamProject&amp;quot;], &amp;quot;Task&amp;quot;);
    child[&amp;quot;Title&amp;quot;] = &amp;quot;Task auto-generated for &amp;quot; + parent[&amp;quot;Title&amp;quot;];
    child.AddWorkItemLink(parent, WorkItemImplementationBase.ParentRelationship);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can use the pre-defined &lt;code&gt;WorkItemImplementationBase.ChildRelationship&lt;/code&gt; and &lt;code&gt;WorkItemImplementationBase.ParentRelationship&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Be careful to use the Immutable name of a Link Type, e.g. &lt;code&gt;System.LinkTypes.Hierarchy-Reverse&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;addhyperlink-method&#34;&gt;AddHyperlink method&lt;/h2&gt;

&lt;p&gt;Add an hyperlink to an URL.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;self.AddHyperlink(&amp;quot;https://github.com/tfsaggregator/tfsaggregator&amp;quot;, &amp;quot;Automatically added&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;removeworkitemlink-method-v2-3&#34;&gt;RemoveWorkItemLink method (&lt;strong&gt;v2.3&lt;/strong&gt;)&lt;/h2&gt;

&lt;p&gt;Remove a link to another work item.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;foreach (var link in self.WorkItemLinks) {
   if (link.Target.Id == 1) {
       logger.Log(
           &amp;quot;RemoveLinkRule removing {0} to #{1}&amp;quot;
           , link.LinkTypeEndImmutableName, link.Target.Id);
       self.RemoveWorkItemLink(link);
       break;
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;history-and-related-properties&#34;&gt;History and related properties&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;self&lt;/code&gt; offers the &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/microsoft.teamfoundation.workitemtracking.client.workitem.history.aspx&#34;&gt;&lt;code&gt;History&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/microsoft.teamfoundation.workitemtracking.client.workitem.reviseddate.aspx&#34;&gt;&lt;code&gt;RevisedDate&lt;/code&gt;&lt;/a&gt;
and &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/microsoft.teamfoundation.workitemtracking.client.workitem.revision.aspx&#34;&gt;&lt;code&gt;Revision&lt;/code&gt;&lt;/a&gt; properties.&lt;/p&gt;

&lt;p&gt;In addition, the &lt;code&gt;LastRevision&lt;/code&gt; property offers access to latest Fields values. While &lt;code&gt;PreviousRevision&lt;/code&gt; and &lt;code&gt;NextRevision&lt;/code&gt; can be used to traverse the history of the workitem.&lt;/p&gt;

&lt;h2 id=&#34;miscellaneous-properties&#34;&gt;Miscellaneous properties&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/microsoft.teamfoundation.workitemtracking.client.workitem.isvalid.aspx&#34;&gt;&lt;code&gt;IsValid&lt;/code&gt;&lt;/a&gt; method is important to check is you set some invalid field value on a work item.&lt;/p&gt;

&lt;p&gt;You can get the &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/microsoft.teamfoundation.workitemtracking.client.workitem.id.aspx&#34;&gt;&lt;code&gt;Id&lt;/code&gt;&lt;/a&gt;
and &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/microsoft.teamfoundation.workitemtracking.client.workitemtype.name.aspx&#34;&gt;&lt;code&gt;TypeName&lt;/code&gt;&lt;/a&gt; of a work item.
The &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/microsoft.teamfoundation.workitemtracking.client.workitem.uri.aspx&#34;&gt;&lt;code&gt;Uri&lt;/code&gt;&lt;/a&gt;
property returns the uniform resource identifier (Uri) of this work item.&lt;/p&gt;

&lt;h2 id=&#34;transitiontostate-method&#34;&gt;TransitionToState method&lt;/h2&gt;

&lt;p&gt;Set the state of &lt;code&gt;self&lt;/code&gt; Work Item.&lt;/p&gt;

&lt;p&gt;A Process Templates can limt the possibile transition states, for example
many templates do not allow you to go directly from a &lt;code&gt;New&lt;/code&gt; state to a &lt;code&gt;Done&lt;/code&gt; state.
With this method TFS Aggregator will cycle the work item through what ever states it needs to to find the &lt;strong&gt;shortest route&lt;/strong&gt; to the target state.
(For most templates that is also the route that makes the most sense from a business perspective too.)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;self.TransitionToState(&amp;quot;Closed&amp;quot;, &amp;quot;Closed by TFS Aggregator&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;fluent-queries&#34;&gt;Fluent Queries&lt;/h2&gt;

&lt;p&gt;You can get work items related using the utility methods to build a query. Applies to any work item object.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;WhereTypeIs&lt;/code&gt; filters on work item type&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AtMost&lt;/code&gt; depth of search, i.e. maximum number of links to follow&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FollowingLinks&lt;/code&gt; filters on link type&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is particularly useful for traversing many links.&lt;/p&gt;

&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;var tests = self.FollowingLinks(&amp;quot;Microsoft.VSTS.Common.TestedBy-Forward&amp;quot;).WhereTypeIs(&amp;quot;Test Case&amp;quot;);
foreach (var test in tests)
{
   if (test[&amp;quot;Microsoft.VSTS.Common.Severity&amp;quot;] == &amp;quot;1 - Critical&amp;quot;) {
      // do something
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;linq&#34;&gt;Linq&lt;/h2&gt;

&lt;p&gt;You can use Linq queries on these collections:
 - &lt;code&gt;Children&lt;/code&gt;
 - &lt;code&gt;Fields&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;

&lt;p&gt;Roll-up code&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var totalEffort = self.Parent.Children.Where(child =&amp;gt; child.TypeName == &amp;quot;Task&amp;quot;).Sum(child =&amp;gt; child.GetField(&amp;quot;TaskEffort&amp;quot;, 0));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sum children&amp;rsquo;s estimate&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;foreach (var child in self.Children.Where(child =&amp;gt; child.Field.Any(field =&amp;gt; field.ReferenceName == &amp;quot;Microsoft.VSTS.Scheduling.OriginalEstimate&amp;quot;)))
{
   if (child.TypeName != &amp;quot;autogenerated&amp;quot;)
   {
      checkedValue += child.GetField&amp;lt;double&amp;gt;(&amp;quot;Microsoft.VSTS.Scheduling.OriginalEstimate&amp;quot;, 0.0);
      othersCount += 1;
   }
   else
   {
      autogeneratedCount += 1;
   }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Field Object</title>
      <link>https://tfsaggregator.github.io/using/objects-reference/field-object/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tfsaggregator.github.io/using/objects-reference/field-object/</guid>
      <description>

&lt;h2 id=&#34;fields-collection&#34;&gt;Fields collection&lt;/h2&gt;

&lt;p&gt;You can iterate over the Field collection of a work item.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;foreach (var f in self.Fields) {
    logger.Log(&amp;quot;{0} #{1} has {2} field&amp;quot;, self.TypeName, self.Id, f.Name);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can directly access a Field using its name:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;self.Fields[&amp;quot;Title&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Prefer using Reference names, e.g. &lt;code&gt;System.Title&lt;/code&gt;, as they do not depend on localization and are more resilient to Process template changes.&lt;/p&gt;

&lt;h2 id=&#34;field-object&#34;&gt;Field Object&lt;/h2&gt;

&lt;p&gt;The Field object exposes the following properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/microsoft.teamfoundation.workitemtracking.client.field.name.aspx&#34;&gt;&lt;code&gt;Name&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/microsoft.teamfoundation.workitemtracking.client.field.referencename.aspx&#34;&gt;&lt;code&gt;ReferenceName&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/microsoft.teamfoundation.workitemtracking.client.field.value.aspx&#34;&gt;&lt;code&gt;Value&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/microsoft.teamfoundation.workitemtracking.client.field.status.aspx&#34;&gt;&lt;code&gt;Status&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/microsoft.teamfoundation.workitemtracking.client.field.originalvalue.aspx&#34;&gt;&lt;code&gt;OriginalValue&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/microsoft.teamfoundation.workitemtracking.client.fielddefinition.systemtype.aspx&#34;&gt;&lt;code&gt;DataType&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TfsField&lt;/code&gt; returns the native TFS &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/microsoft.teamfoundation.workitemtracking.client.field.aspx&#34;&gt;Field&lt;/a&gt; object&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>store Object</title>
      <link>https://tfsaggregator.github.io/using/objects-reference/store-object/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tfsaggregator.github.io/using/objects-reference/store-object/</guid>
      <description>

&lt;p&gt;Represents the current Collection&amp;rsquo;s Work Items and corresponds to the &lt;code&gt;IWorkItemRepositoryExposed&lt;/code&gt; interface.
It exposes these methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GetWorkItem&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MakeNewWorkItem&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GetGlobalList&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;getworkitem-method&#34;&gt;GetWorkItem method&lt;/h2&gt;

&lt;p&gt;Retrieves a work item from the current Collection by ID.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var myWorkitem = store.GetWorkItem(42);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;makenewworkitem-methods&#34;&gt;MakeNewWorkItem methods&lt;/h2&gt;

&lt;p&gt;Add a new WorkItem to current Collection.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var newWorkItem = store.MakeNewWorkItem(self, &amp;quot;Bug&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This syntax will create the new work item in the same TeamProject as &lt;code&gt;self&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var newWorkItem = store.MakeNewWorkItem(&amp;quot;MyProject&amp;quot;, &amp;quot;Bug&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using this overload, you can specify the TeamProject.&lt;/p&gt;

&lt;p&gt;Both methods require specifying the new work item&amp;rsquo;s type.&lt;/p&gt;

&lt;p&gt;The new work item Fields have default values; it is not committed to the database until all the rules have fired and Aggregator returns control to TFS.&lt;/p&gt;

&lt;h2 id=&#34;getgloballist-method&#34;&gt;GetGlobalList method&lt;/h2&gt;

&lt;p&gt;Retrieves the collection of items for the named Global List.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var items = store.GetGlobalList(&amp;quot;Aggregator - UserParameters&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;The global list name must be unique per-collection.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>logger Object</title>
      <link>https://tfsaggregator.github.io/using/objects-reference/logger-object/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tfsaggregator.github.io/using/objects-reference/logger-object/</guid>
      <description>

&lt;p&gt;Allows to add a trace message to the log output via the &lt;code&gt;Log&lt;/code&gt; method.&lt;/p&gt;

&lt;h2 id=&#34;log-method&#34;&gt;Log method&lt;/h2&gt;

&lt;p&gt;It works like &lt;code&gt;Console.WriteLine&lt;/code&gt;, accepting a format string followed by optional arguments.
If you do not specify the importance, the message will be logged at &lt;code&gt;Verbose&lt;/code&gt; level.&lt;/p&gt;

&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;logger.Log(&amp;quot;Hello, World from {1} #{0}!&amp;quot;, self.Id, self.TypeName);

logger.Log(LogLevel.Warning, &amp;quot;Unexpected work item state!&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Possible &lt;code&gt;LogLevel&lt;/code&gt; values are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Critical&lt;/li&gt;
&lt;li&gt;Error&lt;/li&gt;
&lt;li&gt;Warning&lt;/li&gt;
&lt;li&gt;Information&lt;/li&gt;
&lt;li&gt;Verbose&lt;/li&gt;
&lt;li&gt;Diagnostic&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each message goes to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Debug output (visible using DebugView).&lt;/li&gt;
&lt;li&gt;Windows &lt;em&gt;Application&lt;/em&gt; EventLog using &lt;code&gt;TFS Aggregator&lt;/code&gt; source, when level is &lt;strong&gt;Warning&lt;/strong&gt; or &lt;strong&gt;Critical&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;.Net Trace listeners.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The .Net Trace Source for user messages is &lt;code&gt;TfsAggregator.User&lt;/code&gt;; TFS Aggregator own messages have &lt;code&gt;TfsAggregator.ServerPlugin&lt;/code&gt; Trace Source.&lt;/p&gt;

&lt;h2 id=&#34;rulename-property-v2-1&#34;&gt;RuleName property (&lt;strong&gt;v2.1&lt;/strong&gt;)&lt;/h2&gt;

&lt;p&gt;Returns the name of current executing Rule.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;logger.Log(&amp;quot;Hello from Rule {0} processing {1} #{2}.&amp;quot;, logger.RuleName, self.TypeName, self.Id);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Library Objects</title>
      <link>https://tfsaggregator.github.io/using/objects-reference/library-objects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tfsaggregator.github.io/using/objects-reference/library-objects/</guid>
      <description>

&lt;p&gt;Library of utility functions. (&lt;strong&gt;v2.2&lt;/strong&gt;)
It exposes two static methods &lt;code&gt;SendMail&lt;/code&gt; and &lt;code&gt;GetEmailAddress&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;getemailaddress&#34;&gt;GetEmailAddress&lt;/h2&gt;

&lt;p&gt;Retrieve the email address for a user.&lt;/p&gt;

&lt;p&gt;You can use the DOMAIN\user form,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;string email = Library.GetEmailAddress(&amp;quot;WIN-3H7CMUV7KDM\\User1&amp;quot;, &amp;quot;does-not-exists@example.com&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or the User Display name.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;string email = Library.GetEmailAddress(&amp;quot;User One&amp;quot;, &amp;quot;does-not-exists@example.com&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;sendmail&#34;&gt;SendMail&lt;/h2&gt;

&lt;p&gt;Send an email using TFS current configuration.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;string to = &amp;quot;test@example.com&amp;quot;;
string subject = &amp;quot;Sent from a Rule&amp;quot;;
string body = &amp;quot;It worked!&amp;quot;;
Library.SendMail(to, subject, body);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;From&lt;/code&gt; address is configured in TFS and cannot be changed.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Examples of Policies</title>
      <link>https://tfsaggregator.github.io/using/policy-examples/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tfsaggregator.github.io/using/policy-examples/</guid>
      <description>

&lt;h2 id=&#34;sample-polices&#34;&gt;Sample polices&lt;/h2&gt;

&lt;p&gt;The Unit tests use policy files from &lt;code&gt;UnitTests.Core\ConfigurationsForTests&lt;/code&gt; folder, this are the most correct and tested. They do not show how to solve real world&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;samples\TFSAggregator2.ServerPlugin.policies&lt;/code&gt; should be your &lt;strong&gt;starting point&lt;/strong&gt;. This file contains a no-harm policy: it simply logs an &amp;ldquo;&lt;em&gt;Hello, World&lt;/em&gt;&amp;rdquo; message when invoked. The comments remind the syntax.&lt;/p&gt;

&lt;p&gt;From time to time, we test the policies contained in the &lt;code&gt;ManualTests&lt;/code&gt; folder. They are good to learn but should not be trusted 100%, at least until we are able to setup automated integration testing.&lt;/p&gt;

&lt;h2 id=&#34;example-aggregations&#34;&gt;Example Aggregations&lt;/h2&gt;

&lt;h3 id=&#34;calculated-field&#34;&gt;Calculated field&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;rule name=&amp;quot;Sum&amp;quot; appliesTo=&amp;quot;Task&amp;quot; hasFields=&amp;quot;Title,Description&amp;quot;&amp;gt;&amp;lt;![CDATA[
    self[&amp;quot;Estimated Work&amp;quot;] = (double)self[&amp;quot;Estimated Dev Work&amp;quot;] + (double)self[&amp;quot;Estimated Test Work&amp;quot;];
]]&amp;gt;&amp;lt;/rule&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This aggregation will total the values found in the Estimated Dev Work and Estimated Test Work fields for any Task work item.
The total will be placed in the Estimated Work field on the same work item as the source values were found.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./calculated-field.png&#34; alt=&#34;Calculated field in form&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;rollup-field-on-parent&#34;&gt;Rollup field on parent&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;rule name=&amp;quot;Rollup&amp;quot; hasFields=&amp;quot;Estimated Dev Work;Estimated Test Work&amp;quot;&amp;gt;&amp;lt;![CDATA[
  if (self.HasParent()) {
    self.Parent[&amp;quot;Total Estimate&amp;quot;] = (double)self.Parent[&amp;quot;Estimated Dev Work&amp;quot;] + (double)self[&amp;quot;Estimated Test Work&amp;quot;];
  }
]]&amp;gt;&amp;lt;/rule&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This aggregation will total the values found in the Estimated Dev Work and Estimated Test Work fields for all Task work items on the parent.
The total will go in the Total Estimate field on the parent one level up from the Task (i.e. the direct parent).
In the Microsoft Visual Studio Scrum template that is always a Bug or Product Backlog Item.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note on States&lt;/strong&gt;: TFS has controls setup on State Transitions.
Most templates do not allow you to go directly from a New state to a Done state.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;pick-children-satisfying-condition&#34;&gt;Pick children satisfying condition&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;var child in self.Children.Where(
   child =&amp;gt; child.Field.Any(
      field =&amp;gt; field.ReferenceName == &amp;quot;Custom.Product&amp;quot;)
);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;using-linq-to-aggregate&#34;&gt;Using Linq to Aggregate&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;rule name=&amp;quot;RollupTask&amp;quot; appliesTo=&amp;quot;Task&amp;quot;&amp;gt;&amp;lt;![CDATA[
if (self.HasParent())
{
    var parent = self.Parent;
    parent[&amp;quot;Microsoft.VSTS.Scheduling.CompletedWork&amp;quot;] = parent.Children.Sum(task =&amp;gt; task.GetField&amp;lt;double&amp;gt;(&amp;quot;Microsoft.VSTS.Scheduling.CompletedWork&amp;quot;, 0d));
    parent[&amp;quot;Microsoft.VSTS.Scheduling.RemainingWork&amp;quot;] = parent.Children.Sum(task =&amp;gt; task.GetField&amp;lt;double&amp;gt;(&amp;quot;Microsoft.VSTS.Scheduling.RemainingWork&amp;quot;, 0d));
    parent[&amp;quot;Microsoft.VSTS.Scheduling.OriginalEstimate&amp;quot;] = parent.Children.Sum(task =&amp;gt; task.GetField&amp;lt;double&amp;gt;(&amp;quot;Microsoft.VSTS.Scheduling.OriginalEstimate&amp;quot;, 0d));
}
]]&amp;gt;&amp;lt;/rule&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This rule updates a Product Backlog Item or Bug whenever any child Task is added or changes. The &lt;em&gt;Completed Work&lt;/em&gt;, &lt;em&gt;Remaining Work&lt;/em&gt; and &lt;em&gt;Original Estimate&lt;/em&gt; on the parent become the sum of the corresponding fields of children Tasks.
Note that children Bug or Test Case do not update the parent.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Auto-Open and Auto-Close</title>
      <link>https://tfsaggregator.github.io/using/examples/auto-open-auto-close/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tfsaggregator.github.io/using/examples/auto-open-auto-close/</guid>
      <description>

&lt;h1 id=&#34;example-auto-open-auto-close&#34;&gt;Example: Auto-open, Auto Close&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Process template:&lt;/em&gt; Scrum&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;rule name=&amp;quot;AutoOpen&amp;quot; appliesTo=&amp;quot;Task&amp;quot;&amp;gt;
    &amp;lt;!-- Update Work Item to Committed if a task became &amp;quot;active&amp;quot; --&amp;gt;
    &amp;lt;![CDATA[
    if (new[] {&amp;quot;In Progress&amp;quot;, &amp;quot;To Do&amp;quot;}.Contains((string)self[&amp;quot;System.State&amp;quot;]))
    {
        if(self.HasParent() &amp;amp;&amp;amp; ((string)self.Parent[&amp;quot;System.State&amp;quot;]) != &amp;quot;Committed&amp;quot;)
        {
            self.Parent.TransitionToState(&amp;quot;Committed&amp;quot;, &amp;quot;Auto Activated&amp;quot;);
        }
    }
    ]]&amp;gt;
&amp;lt;/rule&amp;gt;

&amp;lt;rule name=&amp;quot;AutoClose&amp;quot; appliesTo=&amp;quot;Task&amp;quot;&amp;gt;
    &amp;lt;!-- Update Work Item to Done if a all child tasks are Done or Removed --&amp;gt;
    &amp;lt;![CDATA[
    if ((string)self[&amp;quot;System.State&amp;quot;] == &amp;quot;Done&amp;quot; &amp;amp;&amp;amp; self.HasParent() &amp;amp;&amp;amp; ((string)self.Parent[&amp;quot;System.State&amp;quot;]) != &amp;quot;Done&amp;quot;)
    {
        if (self.Parent.Children.All(child =&amp;gt; new[] {&amp;quot;Removed&amp;quot;, &amp;quot;Done&amp;quot;}.Contains((string)child[&amp;quot;System.State&amp;quot;])))
        {
            self.Parent.TransitionToState(&amp;quot;Done&amp;quot;, &amp;quot;Auto done&amp;quot;);
        }
    }
    ]]&amp;gt;
&amp;lt;/rule&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Auto-Create Children</title>
      <link>https://tfsaggregator.github.io/using/examples/auto-create-children/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tfsaggregator.github.io/using/examples/auto-create-children/</guid>
      <description>

&lt;h1 id=&#34;example-auto-create-children&#34;&gt;Example: Auto-Create Children&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Process template:&lt;/em&gt; Any&lt;/p&gt;

&lt;p&gt;This example can serve to create a set of standard tasks for work items of a certain type. Say:
 * Analyze issue
 * Fix issue
 * Test issue&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- WorkItems --&amp;gt;
&amp;lt;rule name=&amp;quot;NewTask&amp;quot;
      appliesTo=&amp;quot;Bug&amp;quot;&amp;gt;
    &amp;lt;![CDATA[
    var parent = self;
    if (!self.HasChildren())
    {
        // use self to pass in the Team Project Context
        var child = store.MakeNewWorkItem(self, &amp;quot;Task&amp;quot;);
        child[&amp;quot;Title&amp;quot;] = &amp;quot;Task auto-generated for &amp;quot; + parent[&amp;quot;Title&amp;quot;];
  
        // use the name of the relationship or one of the pre-defined static values
        // by adding the link to the child, you don&#39;t change the parent in this script.
        child.AddWorkItemLink(parent, &amp;quot;parent&amp;quot;);
        // child.AddWorkItemLink(parent, WorkItemImplementationBase.ParentRelationship); //should also work
    }
    ]]&amp;gt;
&amp;lt;/rule&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See also:
 * &lt;a href=&#34;https://github.com/tfsaggregator/tfsaggregator/blob/master/UnitTests.Core/ConfigurationsForTests/NewObjects.policies&#34;&gt;https://github.com/tfsaggregator/tfsaggregator/blob/master/UnitTests.Core/ConfigurationsForTests/NewObjects.policies&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tricks &amp; Tips</title>
      <link>https://tfsaggregator.github.io/using/scripting-tricks-n-tips/scripting-tricks-n-tips/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tfsaggregator.github.io/using/scripting-tricks-n-tips/scripting-tricks-n-tips/</guid>
      <description>

&lt;p&gt;The examples are in C#&lt;/p&gt;

&lt;h2 id=&#34;use-fields-reference-names&#34;&gt;Use Fields&amp;rsquo; Reference Names&lt;/h2&gt;

&lt;p&gt;Write your rules using the Reference name for fields, e.g. &lt;code&gt;Microsoft.VSTS.Common.Priority&lt;/code&gt;.
That way your rules will work on process templates in different languages: &lt;strong&gt;Priority&lt;/strong&gt; becomes &lt;strong&gt;Priorität&lt;/strong&gt; in a German template.&lt;/p&gt;

&lt;p&gt;Also the name may change in different template or newer version of the same template. Your rules are more likely to survive TFS upgrades unharmed.&lt;/p&gt;

&lt;h2 id=&#34;use-link-types-reference-names&#34;&gt;Use Link Types&amp;rsquo; Reference Names&lt;/h2&gt;

&lt;p&gt;Write your rules using the Reference name for link types, e.g. &lt;code&gt;Microsoft.VSTS.Common.TestedBy-Forward&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;field-can-be-null&#34;&gt;Field can be null&lt;/h2&gt;

&lt;p&gt;Remember that a work item field value is of type &lt;code&gt;object&lt;/code&gt; and can be null.&lt;/p&gt;

&lt;p&gt;Style #1: use the &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/ms173224.aspx&#34;&gt;null-coalescing operator&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(double)(self.Parent[&amp;quot;Microsoft.VSTS.Scheduling.OriginalEstimate&amp;quot;] ?? 0d)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;notice the parentheses and the cast.&lt;/p&gt;

&lt;p&gt;Style #2: use the &lt;code&gt;GetField&lt;/code&gt; helper function&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;self.Parent.GetField&amp;lt;double&amp;gt;(&amp;quot;Microsoft.VSTS.Scheduling.OriginalEstimate&amp;quot;, 0d)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;internally uses a &lt;code&gt;try..catch&lt;/code&gt; block.&lt;/p&gt;

&lt;p&gt;Style #3: check the Valid property&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var parentField = self.Parent[&amp;quot;Microsoft.VSTS.Scheduling.OriginalEstimate&amp;quot;];
if (parentField.Status == FieldStatus.Valid) {
  parentField.Value += (double)self[&amp;quot;Microsoft.VSTS.Scheduling.OriginalEstimate&amp;quot;];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;notice that parent field is left untouched is it has no value.&lt;/p&gt;

&lt;h2 id=&#34;trace-your-steps&#34;&gt;Trace your steps&lt;/h2&gt;

&lt;p&gt;Consider using the logger object in non-trivial rules or when you are uncertain of the values in use.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (self.HasParent())
{
    var parent = self.Parent;
    logger.Log(&amp;quot;Task #{0} updates {1} #{2}&amp;quot;, self.Id, parent.TypeName, parent.Id);
    
    parent[&amp;quot;Microsoft.VSTS.Scheduling.CompletedWork&amp;quot;] = parent.Children.Sum(task =&amp;gt; task.GetField&amp;lt;double&amp;gt;(&amp;quot;Microsoft.VSTS.Scheduling.CompletedWork&amp;quot;, 0d));
    parent[&amp;quot;Microsoft.VSTS.Scheduling.RemainingWork&amp;quot;] = parent.Children.Sum(task =&amp;gt; task.GetField&amp;lt;double&amp;gt;(&amp;quot;Microsoft.VSTS.Scheduling.RemainingWork&amp;quot;, 0d));
    
    logger.Log(&amp;quot;CompletedWork is {0}, RemainingWork is {1}&amp;quot;, parent[&amp;quot;Microsoft.VSTS.Scheduling.CompletedWork&amp;quot;], parent[&amp;quot;Microsoft.VSTS.Scheduling.RemainingWork&amp;quot;]);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output is sent to debugger output and .Net Trace.&lt;/p&gt;

&lt;p&gt;You can use &lt;strong&gt;DebugView&lt;/strong&gt; from Microsoft&amp;rsquo;s SysInternals site at &lt;a href=&#34;http://technet.microsoft.com/en-us/sysinternals/bb896647&#34;&gt;http://technet.microsoft.com/en-us/sysinternals/bb896647&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;DebugView is a lightweight Trace Listener and will capture the trace messages from TFSAggregator.
&lt;img src=&#34;./messages-in-dbgview.png&#34; alt=&#34;TFSAggregator messages in DebugView&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We would recommend adding the &lt;code&gt;*TFSAggregator:*&lt;/code&gt; filter to DebugView so that you only see the TFSAggregator traces.
&lt;img src=&#34;./dbg-view-filter.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Make sure to enable the &lt;strong&gt;Capture Global Win32&lt;/strong&gt; option.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;You have to run DebugView on &lt;em&gt;all&lt;/em&gt; TFS Application Tier machines&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;infinite-cycle&#34;&gt;Infinite cycle&lt;/h2&gt;

&lt;p&gt;Always set a Rate Limit feature to limit the damage of infinite loops.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;AggregatorConfiguration&amp;gt;
    &amp;lt;runtime&amp;gt;
        &amp;lt;rateLimiting interval=&amp;quot;00:00:01.00&amp;quot; changes=&amp;quot;5&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;use-template-scope&#34;&gt;Use Template Scope&lt;/h2&gt;

&lt;p&gt;Instead of scoping Rules to a Collection or a set of Projects, you can define to apply the Rules to any Project using a specific template. E.g.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;templateScope name=&amp;quot;Scrum&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Remember that name must match exactly.
Verify before each TFS upgrade if any Process Template has changed name and update your policies eventually.&lt;/p&gt;

&lt;h2 id=&#34;use-hasfields-instead-of-appliesto&#34;&gt;Use &lt;em&gt;hasFields&lt;/em&gt; instead of &lt;em&gt;appliesTo&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;appliesTo&lt;/code&gt; filter restrict a Rule to a specific set of work item types.
You can define a more generic rule using the &lt;code&gt;hasFields&lt;/code&gt; filter. Using it the code does not depends on specific work item type and the way they are named.&lt;/p&gt;

&lt;p&gt;This has the advantage that the rule will also work when people customize the template by copying an existing Work Item Type, like &lt;code&gt;Task&lt;/code&gt; -&amp;gt; &lt;code&gt;In Sprint Bug&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;numeric-deltas&#34;&gt;Numeric Deltas&lt;/h2&gt;

&lt;h3 id=&#34;the-problem&#34;&gt;The Problem&lt;/h3&gt;

&lt;p&gt;Consider the following rule&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;self.Parent[&amp;quot;Custom.RemainingWork&amp;quot;] = (double)self.Parent[&amp;quot;Custom.RemainingWork&amp;quot;] + (double)self[&amp;quot;Microsoft.VSTS.Scheduling.RemainingWork&amp;quot;];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The problem is that the parent value will be increased with every change.&lt;/p&gt;

&lt;p&gt;If the child has a value of 5, the parent value will be increased by 5. When I change the child value from 5 to 2, the parent value will be increased be 2, but it should be decreased with 3.&lt;/p&gt;

&lt;p&gt;The requirement is to aggregate the difference from the new value to the old value and not the raw new value only.&lt;/p&gt;

&lt;h3 id=&#34;a-solution&#34;&gt;A Solution&lt;/h3&gt;

&lt;p&gt;A simple way is adding an hidden field, say &lt;code&gt;Custom.PreviousRemainingWork&lt;/code&gt;. The rule will become something like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;double delta = (double)(self[&amp;quot;Custom.PreviousRemainingWork&amp;quot;]??0d) - (double)(self[&amp;quot;Microsoft.VSTS.Scheduling.RemainingWork&amp;quot;]??0d);
self.Parent[&amp;quot;Custom.RemainingWork&amp;quot;] = (double)(self.Parent[&amp;quot;Custom.RemainingWork&amp;quot;]??0d) + delta;
self[&amp;quot;Custom.PreviousRemainingWork&amp;quot;] = (double)(self[&amp;quot;Microsoft.VSTS.Scheduling.RemainingWork&amp;quot;]??0d);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Common Pitfalls</title>
      <link>https://tfsaggregator.github.io/using/scripting-pitfalls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tfsaggregator.github.io/using/scripting-pitfalls/</guid>
      <description>

&lt;h2 id=&#34;null&#34;&gt;Null&lt;/h2&gt;

&lt;p&gt;Any field can return &lt;code&gt;null&lt;/code&gt;. Casting null to a numeric value or a date throws a &lt;code&gt;NullReferenceException&lt;/code&gt;.
The following C# code&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(double)self.Parent[&amp;quot;Microsoft.VSTS.Scheduling.OriginalEstimate&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;may succeed or throw.&lt;/p&gt;

&lt;p&gt;There are many ways to overcame this issue: the &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/ms173224.aspx&#34;&gt;null-coalescing operator&lt;/a&gt;, use the &lt;code&gt;GetField&lt;/code&gt; helper function or check the Valid property.
See &lt;a href=&#34;https://tfsaggregator.github.io/using/scripting-tricks-n-tips&#34;&gt;Tricks&amp;amp;Tips&lt;/a&gt; for examples.&lt;/p&gt;

&lt;h2 id=&#34;history&#34;&gt;History&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;History&lt;/code&gt; and &lt;code&gt;Revision&lt;/code&gt; properties are tricky.&lt;/p&gt;

&lt;p&gt;Imagine this sequence:
 1. A user opens a work item, whose &lt;code&gt;Revision&lt;/code&gt; property values &lt;code&gt;7&lt;/code&gt;
 2. She edits the &lt;code&gt;Description&lt;/code&gt; field and saves
 3. TFS save the changes to the database and increments &lt;code&gt;Revision&lt;/code&gt; to &lt;code&gt;8&lt;/code&gt;
 4. Aggregator is notified of the change&lt;/p&gt;

&lt;p&gt;At this point &lt;code&gt;self.Revision&lt;/code&gt; is &lt;code&gt;8&lt;/code&gt; and &lt;code&gt;LastRevision.Index&lt;/code&gt; is &lt;code&gt;7&lt;/code&gt;. Throught &lt;code&gt;LastRevision&lt;/code&gt; one can see that &lt;code&gt;self.LastRevision.Fields[&amp;quot;Description&amp;quot;].Value&lt;/code&gt; equals what is saved in the database, while &lt;code&gt;OriginalValue&lt;/code&gt; is the value before user edit.&lt;/p&gt;

&lt;p&gt;If the Rule changes any field, you have this:
 5. Aggregator run a rule that changes a field
 6. Aggregator notices the edit and save the workitem to the database
 7. TFS triggers Aggregator again (maybe on a different machine), this time &lt;code&gt;Revision&lt;/code&gt; property is &lt;code&gt;9&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;See &lt;a href=&#34;https://tfsaggregator.github.io/using/field-history&#34;&gt;History field&lt;/a&gt; for full presentation.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>