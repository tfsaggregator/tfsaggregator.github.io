<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Users' Guide on Aggregator</title><link>https://tfsaggregator.github.io/docs/v2/using/</link><description>Recent content in Users' Guide on Aggregator</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://tfsaggregator.github.io/docs/v2/using/index.xml" rel="self" type="application/rss+xml"/><item><title>Writing Rules and Policies</title><link>https://tfsaggregator.github.io/docs/v2/using/writing-rules/writing-rules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tfsaggregator.github.io/docs/v2/using/writing-rules/writing-rules/</guid><description>The samples\TFSAggregator2.ServerPlugin.policies should be your starting point. This file contains a no-harm policy: it simply logs an &amp;ldquo;Hello, World&amp;rdquo; message when invoked. The comments remind the syntax.
Editing a policy # The XML Schema definition is in file Aggregator.Core\Configuration\AggregatorConfiguration.xsd. This is the ultimate truth: policy file is checked against XSD before being used.
It can also help you editing the policy file in Visual Studio. Open TfsAggregator2 solution in Visual Studio, open a policy file using built-in Xml editor, Select XML from the main menu, then Schemas.</description></item><item><title>Configuration XML syntax</title><link>https://tfsaggregator.github.io/docs/v2/using/policy-syntax/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tfsaggregator.github.io/docs/v2/using/policy-syntax/</guid><description>This page describes the content of a policy file.
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt; This is the basic beginning to an XML file. Do not change it.
&amp;lt;AggregatorConfiguration&amp;gt; AggregatorConfiguration: The main node for all the configuration options. (Single)
runtime section # This section controls general behaviour for TFS Aggregator, e.g. authentication, credentials or logging level.
&amp;lt;runtime debug=&amp;quot;False&amp;quot;&amp;gt; runtime: Configure generic behavior. (Once, Optional)
debug: turns on debugging options (Optional, default: False) &amp;lt;rateLimiting interval=&amp;quot;00:00:10.</description></item><item><title>Scripting the Rules</title><link>https://tfsaggregator.github.io/docs/v2/using/scripting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tfsaggregator.github.io/docs/v2/using/scripting/</guid><description>Script languages # You can use C# and VB.Net to write your rules. Powershell also works but we had little tested it.
C# and VB # You can use only types from these assemblies:
System System.Core Microsoft.TeamFoundation.WorkItemTracking.Client Aggregator.Core Any other reference will result in compile errors. The following namespaces are imported (C# using, VB Imports):
Microsoft.TeamFoundation.WorkItemTracking.Client System.Linq Microsoft.TeamFoundation.WorkItemTracking.Client.CoreFieldReferenceNames Aggregator.Core and descendants Code # You can make your code more modular, using macro snippets or functions.</description></item><item><title>Tricks &amp; Tips</title><link>https://tfsaggregator.github.io/docs/v2/using/scripting-tricks-n-tips/scripting-tricks-n-tips/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tfsaggregator.github.io/docs/v2/using/scripting-tricks-n-tips/scripting-tricks-n-tips/</guid><description>The examples are in C#
Use Fields&amp;rsquo; Reference Names # Write your rules using the Reference name for fields, e.g. Microsoft.VSTS.Common.Priority. That way your rules will work on process templates in different languages: Priority becomes Priorit√§t in a German template.
Also the name may change in different template or newer version of the same template. Your rules are more likely to survive TFS upgrades unharmed.
Use Link Types&amp;rsquo; Reference Names # Write your rules using the Reference name for link types, e.</description></item><item><title>Common Pitfalls</title><link>https://tfsaggregator.github.io/docs/v2/using/scripting-pitfalls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tfsaggregator.github.io/docs/v2/using/scripting-pitfalls/</guid><description>Null # Any field can return null. Casting null to a numeric value or a date throws a NullReferenceException. The following C# code
(double)self.Parent[&amp;quot;Microsoft.VSTS.Scheduling.OriginalEstimate&amp;quot;] may succeed or throw.
There are many ways to overcame this issue: the null-coalescing operator, use the GetField helper function or check the Valid property. See Tricks&amp;amp;Tips for examples.
History # The History and Revision properties are tricky.
Imagine this sequence:
A user opens a work item, whose Revision property values 7 She edits the Description field and saves TFS save the changes to the database and increments Revision to 8 Aggregator is notified of the change At this point self.</description></item><item><title>History field</title><link>https://tfsaggregator.github.io/docs/v2/using/field-history/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tfsaggregator.github.io/docs/v2/using/field-history/</guid><description>History field # The History field always appends a new message, the property allows to edit the message until work item is saved.
For example, this code causes an infinite loop (eventually stopped by rateLimiting feature).
self.History = &amp;quot;Hello&amp;quot;; Aggregator is triggered again and again for the same work item.
Some background information # The TFS aggregator only updates a work item if any field has changed by its calculations.</description></item><item><title>Upgrading from v1</title><link>https://tfsaggregator.github.io/docs/v2/using/upgrade-from-v1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tfsaggregator.github.io/docs/v2/using/upgrade-from-v1/</guid><description>Migrating from v1 # TFS Aggregator 2 is a full rewrite of the plugin. The old rule syntax is no longer supported. In case you&amp;rsquo;re looking for the latest version of version 1.01, you can still find it here (including a large number of fixes and security updates).
If you want to upgrade to 2.x you&amp;rsquo;ll have to rewrite your rules in the new format, the installation and upgrade process are explained below.</description></item></channel></rss>