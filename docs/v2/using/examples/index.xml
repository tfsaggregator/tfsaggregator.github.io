<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Examples of Policies on Aggregator</title><link>https://tfsaggregator.github.io/docs/v2/using/examples/</link><description>Recent content in Examples of Policies on Aggregator</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://tfsaggregator.github.io/docs/v2/using/examples/index.xml" rel="self" type="application/rss+xml"/><item><title>Accumulate to grand-parent example</title><link>https://tfsaggregator.github.io/docs/v2/using/examples/accumulate-to-grand-parent/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tfsaggregator.github.io/docs/v2/using/examples/accumulate-to-grand-parent/</guid><description>Process template: Any
Add the AccumulatedWork from Tasks up to grand-parent, i.e. Feature.
&amp;lt;rule name=&amp;quot;updateFeatureScrumAccrued&amp;quot; appliesTo=&amp;quot;Task&amp;quot; hasFields=&amp;quot;CustomField.AccumulatedWork&amp;quot;&amp;gt;&amp;lt;![CDATA[ IWorkItemExposed topFeature = self.FollowingLinks(&amp;quot;System.LinkTypes.Hierarchy-Reverse&amp;quot;).WhereTypeIs(&amp;quot;Feature&amp;quot;).AtMost(5).FirstOrDefault(); if (topFeature != null) { logger.Log(&amp;quot;Feature {0}&amp;quot;, topFeature.Id); var taskChildren = topFeature.FollowingLinks(&amp;quot;System.LinkTypes.Hierarchy-Forward&amp;quot;).WhereTypeIs(&amp;quot;Task&amp;quot;).AtMost(5); var sum = 0.0; foreach (var task in taskChildren) { sum += task.GetField&amp;lt;double&amp;gt;(&amp;quot;CustomField.AccumulatedWork&amp;quot;, 0.0); } topFeature[&amp;quot;CustomField.ScrumAccrued&amp;quot;] = sum; } ]]&amp;gt;&amp;lt;/rule&amp;gt;</description></item><item><title>Auto-Create Children example</title><link>https://tfsaggregator.github.io/docs/v2/using/examples/auto-create-children/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tfsaggregator.github.io/docs/v2/using/examples/auto-create-children/</guid><description>Example: Auto-Create Children # Process template: Any
This example can serve to create a set of standard tasks for work items of a certain type. Say:
Analyze issue Fix issue Test issue &amp;lt;!-- WorkItems --&amp;gt; &amp;lt;rule name=&amp;quot;NewTask&amp;quot; appliesTo=&amp;quot;Bug&amp;quot;&amp;gt; &amp;lt;![CDATA[ var parent = self; if (!self.HasChildren()) { // use self to pass in the Team Project Context var child = store.MakeNewWorkItem(self, &amp;quot;Task&amp;quot;); child[&amp;quot;Title&amp;quot;] = &amp;quot;Task auto-generated for &amp;quot; + parent[&amp;quot;Title&amp;quot;]; // use the name of the relationship or one of the pre-defined static values // by adding the link to the child, you don't change the parent in this script.</description></item><item><title>Auto-Open and Auto-Close example</title><link>https://tfsaggregator.github.io/docs/v2/using/examples/auto-open-auto-close/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tfsaggregator.github.io/docs/v2/using/examples/auto-open-auto-close/</guid><description>Applies to Scrum Process template
&amp;lt;rule name=&amp;quot;AutoOpen&amp;quot; appliesTo=&amp;quot;Task&amp;quot;&amp;gt; &amp;lt;!-- Update Work Item to Committed if a task became &amp;quot;active&amp;quot; --&amp;gt; &amp;lt;![CDATA[ if (new[] {&amp;quot;In Progress&amp;quot;, &amp;quot;To Do&amp;quot;}.Contains((string)self[&amp;quot;System.State&amp;quot;])) { if(self.HasParent() &amp;amp;&amp;amp; ((string)self.Parent[&amp;quot;System.State&amp;quot;]) != &amp;quot;Committed&amp;quot;) { self.Parent.TransitionToState(&amp;quot;Committed&amp;quot;, &amp;quot;Auto Activated&amp;quot;); } } ]]&amp;gt; &amp;lt;/rule&amp;gt; &amp;lt;rule name=&amp;quot;AutoClose&amp;quot; appliesTo=&amp;quot;Task&amp;quot;&amp;gt; &amp;lt;!-- Update Work Item to Done if a all child tasks are Done or Removed --&amp;gt; &amp;lt;![CDATA[ if ((string)self[&amp;quot;System.State&amp;quot;] == &amp;quot;Done&amp;quot; &amp;amp;&amp;amp; self.HasParent() &amp;amp;&amp;amp; ((string)self.Parent[&amp;quot;System.State&amp;quot;]) != &amp;quot;Done&amp;quot;) { if (self.</description></item><item><title>Remaining Work and Completed Work synchronization for Task WI</title><link>https://tfsaggregator.github.io/docs/v2/using/examples/log-time-synch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tfsaggregator.github.io/docs/v2/using/examples/log-time-synch/</guid><description>This is an example of automation that allows keep consistency between Remaining Work and Completed Work for Task WI
General Flow:
Remaining Work decreased (and Completed Work not changed) =&amp;gt; then increase Completed Work accordingly Completed Work increased (and remainin Work not changed) =&amp;gt; then decrease Remaining Work accordingly All other cases don&amp;rsquo;t require any modifications as they are threated as re-estimation and should follow user decision Process template: Agile or any template that has RemainingWork and CompletedWork fields for Task WI</description></item><item><title>Rollup examples</title><link>https://tfsaggregator.github.io/docs/v2/using/examples/rollup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tfsaggregator.github.io/docs/v2/using/examples/rollup/</guid><description>Using Linq to Aggregate # Applies to Scrum or CMMI Process templates.
&amp;lt;rule name=&amp;quot;RollupTask&amp;quot; appliesTo=&amp;quot;Task&amp;quot;&amp;gt;&amp;lt;![CDATA[ if (self.HasParent()) { var parent = self.Parent; parent[&amp;quot;Microsoft.VSTS.Scheduling.CompletedWork&amp;quot;] = parent.Children.Sum(task =&amp;gt; task.GetField&amp;lt;double&amp;gt;(&amp;quot;Microsoft.VSTS.Scheduling.CompletedWork&amp;quot;, 0d)); parent[&amp;quot;Microsoft.VSTS.Scheduling.RemainingWork&amp;quot;] = parent.Children.Sum(task =&amp;gt; task.GetField&amp;lt;double&amp;gt;(&amp;quot;Microsoft.VSTS.Scheduling.RemainingWork&amp;quot;, 0d)); parent[&amp;quot;Microsoft.VSTS.Scheduling.OriginalEstimate&amp;quot;] = parent.Children.Sum(task =&amp;gt; task.GetField&amp;lt;double&amp;gt;(&amp;quot;Microsoft.VSTS.Scheduling.OriginalEstimate&amp;quot;, 0d)); } ]]&amp;gt;&amp;lt;/rule&amp;gt; This rule updates a Product Backlog Item or Bug whenever any child Task is added or changes. The Completed Work, Remaining Work and Original Estimate on the parent become the sum of the corresponding fields of children Tasks.</description></item></channel></rss>