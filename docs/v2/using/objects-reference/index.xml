<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Objects Reference on Aggregator</title><link>https://tfsaggregator.github.io/docs/v2/using/objects-reference/</link><description>Recent content in Objects Reference on Aggregator</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://tfsaggregator.github.io/docs/v2/using/objects-reference/index.xml" rel="self" type="application/rss+xml"/><item><title>self Object</title><link>https://tfsaggregator.github.io/docs/v2/using/objects-reference/self-object/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tfsaggregator.github.io/docs/v2/using/objects-reference/self-object/</guid><description>Represents the work item that triggered the rule and corresponds to the IWorkItemExposed interface.
Fields collection # You can directly access a Field using its name:
self.Fields[&amp;quot;field_name&amp;quot;] Prefer using Reference names e.g. System.Title as they do not depend on localization and are more resilient to Process template changes.
To simply access a field value, you can use self[&amp;quot;field_name&amp;quot;] as a shorthand for self.Fields[&amp;quot;field_name&amp;quot;].Value
For numeric and dates you may prefer using</description></item><item><title>Field Object</title><link>https://tfsaggregator.github.io/docs/v2/using/objects-reference/field-object/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tfsaggregator.github.io/docs/v2/using/objects-reference/field-object/</guid><description>Fields collection # You can iterate over the Field collection of a work item.
foreach (var f in self.Fields) { logger.Log(&amp;quot;{0} #{1} has {2} field&amp;quot;, self.TypeName, self.Id, f.Name); } You can directly access a Field using its name:
self.Fields[&amp;quot;Title&amp;quot;] Prefer using Reference names, e.g. System.Title, as they do not depend on localization and are more resilient to Process template changes.
Field Object # The Field object exposes the following properties:</description></item><item><title>store Object</title><link>https://tfsaggregator.github.io/docs/v2/using/objects-reference/store-object/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tfsaggregator.github.io/docs/v2/using/objects-reference/store-object/</guid><description>Represents the current Collection&amp;rsquo;s Work Items and corresponds to the IWorkItemRepositoryExposed interface. It exposes these methods:
GetWorkItem MakeNewWorkItem GetGlobalList AddItemToGlobalList (v2.3) RemoveItemFromGlobalList (v2.3) GetWorkItem method # Retrieves a work item from the current Collection by ID.
var myWorkitem = store.GetWorkItem(42); MakeNewWorkItem methods # Add a new WorkItem to current Collection.
var newWorkItem = store.MakeNewWorkItem((string)self[&amp;quot;System.TeamProject&amp;quot;], &amp;quot;Bug); This syntax will create the new work item in the same TeamProject as self.</description></item><item><title>logger Object</title><link>https://tfsaggregator.github.io/docs/v2/using/objects-reference/logger-object/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tfsaggregator.github.io/docs/v2/using/objects-reference/logger-object/</guid><description>Allows to add a trace message to the log output via the Log method.
Log method # It works like Console.WriteLine, accepting a format string followed by optional arguments. If you do not specify the importance, the message will be logged at Verbose level.
Examples # logger.Log(&amp;quot;Hello, World from {1} #{0}!&amp;quot;, self.Id, self.TypeName); logger.Log(LogLevel.Warning, &amp;quot;Unexpected work item state!&amp;quot;); Possible LogLevel values are:
Critical Error Warning Information Verbose Diagnostic Each message goes to</description></item><item><title>Library Objects</title><link>https://tfsaggregator.github.io/docs/v2/using/objects-reference/library-objects/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tfsaggregator.github.io/docs/v2/using/objects-reference/library-objects/</guid><description>Library of utility functions. (v2.2) It exposes two static methods SendMail and GetEmailAddress.
GetEmailAddress # Retrieve the email address for a user.
Caveat: This method works only in the Server Plugin
You can use the DOMAIN\user form,
string email = Library.GetEmailAddress(&amp;quot;WIN-3H7CMUV7KDM\\User1&amp;quot;, &amp;quot;does-not-exists@example.com&amp;quot;); or the User Display name.
string email = Library.GetEmailAddress(&amp;quot;User One&amp;quot;, &amp;quot;does-not-exists@example.com&amp;quot;); SendMail # Send an email using TFS current configuration.
Caveat: This method works only in the Server Plugin</description></item></channel></rss>